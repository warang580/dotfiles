[alias]
    #> Repository status
    st = status -sb
    s  = ! git st
    # Same with updated remotes
    su = "!f() { git fetch 2> /dev/null; git st; }; f"

    #> Commit history/log
    history = !git log --graph --pretty=format:'%C(yellow)%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an> %C(bold yellow)%d%Creset' --abbrev-commit
    # Shortcut
    h = ! git history
    # Short log
    lg = ! git log --date=format:'%Y-%m-%d %H:%M' --pretty=format:'%C(yellow)%h %Cgreen%ad (%cr)%C(bold yellow)%d%n%C(bold blue)<%an> %Creset%s%n%Creset'
    l  = ! git lg
    d  = ! git diff

    #> date of latest pull (even if no changes)
    when = "!f() { echo -n "Last pull:"; stat -c %y .git/FETCH_HEAD | date +' %d %h %Y %H:%M' -f -; }; f"
    w = ! git when

    #> Search for commits that contains $arg
    search = log --pretty=\"format:%Cgreen%H %Cblue%s\" --name-status --grep

    #> Remotes display
    remotes = remote -v
    r       = ! git remotes
    u       = ! git fetch -pv

    #> Tags display
    tags = ! git log --no-walk --tags --date-order --date=format:'%Y-%m-%d %H:%M' --pretty=format:'%Cgreen%ad%C(bold yellow)%d %C(bold blue)%aN %Creset%Cgreen(%cr)%Creset'
    t = ! git tags

    #> Commits
    a = add
    # Commit (c "message")
    c = ! git commit -m
    # Easy add-everything commit (ci "<msg>")
    ci = ! git add -A && git commit -m
    # Add everything and push immediately
    cip = "!f() { git add -A && git commit -m \"$1\" && git pp; }; f"
    # Undo previous commit (changes are put back in working dir, not added)
    ci-undo = reset HEAD~1 --mixed
    # Undo previous commit (changes are still added)
    undo-commit = reset --soft HEAD^
    # Amend last commit (adding changes after commiting, excluding new files)
    ci-amend = commit -a --amend

    #> Pull / Push (rebasing by default)
	# Just pull
	p = pull --rebase
    # Get latest updates and push changes if no conflicts
    pp = ! git pull --rebase && git push && git s

    # Saves / Loads (with stash)
	save = stash
	load = stash pop

    #> Branches
    # Show all branches
    branches = branch -avv
    # Switch to a branch, creating it if necessary
    b = "!f() { test -z $1 && git branches || (git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"); }; f"
	bd = "!f() { git branch -d $1; }; f"
    bdd = "!f() { git branch -D $1; }; f"
    # Checkout
    co = checkout

    nope = ! git checkout -- .

    # Display contributions
    contributions = shortlog -sn --no-merges

    # Git flow shortcuts
    release = flow release
    feature = flow feature

    # Configuration
    econf  = config --global -e
    esconf = config --system -e
[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true
[push]
    # Push to matching #upstream# by default
    default = matching
	followTags = true
[color]
    # Enable colors
    ui = true
[diff]
    # Detect copies and renames
    renames = copies
[credential]
    # Remember credentials
    helper = cache --timeout=3600
[user]
    name  = Sacha WILT
    email = sacha.wilt@gmail.com
[credential "https://github.com"]
    # My default username
    username = warang580
[include]
    # Allow overriding
    path = ~/.gitconfig.local
